generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?        // Campo adicionado para autenticação
  accounts      Account[]
  sessions      Session[]
  agents        Agent[]
  conversations Conversation[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Agent {
  id             String         @id @default(cuid())
  name           String
  description    String?
  systemPrompt   String?        @db.Text
  modelId        String?
  temperature    Float?
  userId         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  knowledgeBase  KnowledgeBase? @relation(fields: [knowledgeBaseId], references: [id])
  knowledgeBaseId String?
  conversations  Conversation[]
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  name        String
  description String?
  indexName   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  agents      Agent[]
}

model Conversation {
  id        String    @id @default(cuid())
  agentId   String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  agent     Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  content        String       @db.Text
  role           String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}
